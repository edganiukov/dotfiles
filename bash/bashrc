#
# ~/.bashrc
#

# If not running interactively, don't do anything.
[[ $- != *i* ]] && return

# History completion.
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

complete -c man which
complete -cf sudo

__prompt_cmd() {
	# Append history.
	history -a
	# Resolve git branch.
	GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

	# Always start prompt on new line.
	local CURPOS
	stty -echo
	echo -en '\033[6n'
	IFS=';' read -d R -a CURPOS
	stty echo
	(( CURPOS[1] > 1 )) && echo -e '\E[1m\E[41m\E[33m%\E[0m'
}

# Prompt
PROMPT_COMMAND=__prompt_cmd
PS1='\[\033[0;92m\]# \u@\h: \[\033[0;93m\]\W \[\033[0;95m\][${GIT_BRANCH}] \[\033[0m\]\$ '
PS2='\[\033[0;92m\]>\[\033[0m\] '

# History config.
HISTCONTROL="ignoreboth:erasedups"
HISTSIZE=100000
HISTFILESIZE=2000000
HISTIGNORE="&:clear:ls:cd:[bf]g:exit:[ t\]*"
shopt -s histappend
shopt -s checkwinsize

# ENV
export LANG=en_US.UTF-8
export LC_ALL=C.UTF-8
export EDITOR=vim
export CLICOLOR=YES
export GPG_TTY=$(tty)

export GOPATH=$HOME/.go
export PATH="$HOME/.local/bin:$HOME/.go/bin:$HOME/.cargo/bin:$PATH"

export RUSTUP_TOOLCHAIN=stable

# Alias
alias ..="cd .."
alias ls='ls --color'
alias ll='ls --color -hl'
alias grep="grep --colour"
alias curl="curl -s"
alias diff="diff -u --color"
alias sxivd="nsxiv -r -t -s d"
alias sxiv="nsxiv"
alias magit="vim -c :MagitOnly"
alias notes="vim -c ':lcd ~/misc/notes'"

# Plugins
# https://github.com/junegunn/fzf
export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
[ -f /usr/share/fzf/key-bindings.bash ] && source /usr/share/fzf/key-bindings.bash
[ -f /usr/share/fzf/completion.bash ] && source /usr/share/fzf/completion.bash

# https://github.com/scop/bash-completion
[ -f /usr/share/bash-completion/bash_completion ] && source /usr/share/bash-completion/bash_completion

# dircolors
[ -f $HOME/.dir_colors ] && eval "$(dircolors $HOME/.dir_colors)"

# Functions
# n - start nnn file manager.
n() {
	# Block nesting of nnn in subshells
	if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
		echo "nnn is already running"
		return
	fi

	# Unmask ^Q (if required, see `stty -a`) to Quit nnn
	stty start undef
	stty stop undef
	stty lnext undef

	NNN_CTXMAX=1 \
	NNN_BMS="h:~;t:~/tmp"  \
	NNN_TRASH=1 \
	NNN_PLUG="d:diffs;m:nmount;n:notes;v:imgview" \
	NNN_USE_EDITOR=1 \
	NNN_COLORS="4444" \
	NNN_COPIER="xargs -0 < \"$SELECTION\" | xclip -selection clipboard -i" \
	NNN_FIFO="/tmp/nnn.fifo" \
	nnn -e -x -o -C "$@"
}

# tm - creates new tmux session, or switch to existing one.
tm() {
	[[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
	name="${1:-$(basename $PWD)}"
	tmux has-session -t $name 2>/dev/null && tmux $change -t "$name" || (tmux new-session -d -s $name && tmux $change -t "$name")
}

p() {
	local pass_store=${PASSWORD_STORE_DIR:-~/.password-store/}
	fd ".*.gpg" ${pass_store} -c never -x echo {.} | sed -e "s#${pass_store}##g" \
		| fzf --header "pass show" --tabstop=4 --ansi --height 40% | xargs --no-run-if-empty pass show
}
