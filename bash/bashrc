#
# ~/.bashrc
#

# if not running interactively, don't do anything
[[ $- != *i* ]] && return

# History completion.
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

complete -c man which
complete -cf sudo

__prompt_cmd() {
	# append history
	history -a
	# resolve git branch
	GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

	# always start prompt on new line
	local CURPOS
	stty -echo
	echo -en '\033[6n'
	IFS=';' read -d R -a CURPOS
	stty echo
	(( CURPOS[1] > 1 )) && echo -e '\E[1m\E[41m\E[33m%\E[0m'
}

# Prompt
PROMPT_COMMAND=__prompt_cmd
PS1='\[\033[0;92m\]# \u@\h: \[\033[0;93m\]\W \[\033[0;95m\][${GIT_BRANCH}] \[\033[0m\]\$ '
PS2='\[\033[0;92m\]>\[\033[0m\] '

bind -x '"\C-r": __history_fzf'
__history_fzf() {
	READLINE_LINE=$(
		HISTTIMEFORMAT=
		history | sort -rn \
			| awk '{ $1="" ; if (!x[$0]++) print substr($0,2) }' \
			| fzf --height=~40% -q "$READLINE_LINE"
	)
	READLINE_POINT=0x7FFFFFFF
}

# history config
HISTCONTROL="ignoreboth:erasedups"
HISTSIZE=100000
HISTFILESIZE=2000000
HISTIGNORE="&:clear:reset:ls:ll:cd:..:[bf]g:exit:[ t\]*"
shopt -s histappend
shopt -s checkwinsize

# env
export LANG=en_US.UTF-8
export LC_ALL=C.UTF-8
export EDITOR=vim
export CLICOLOR=YES
export GPG_TTY=$(tty)

export GOPATH=$HOME/.go
export PATH="$HOME/.local/bin:$HOME/.go/bin:$HOME/.cargo/bin:$PATH"

export RUSTUP_TOOLCHAIN=stable
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

export FZF_DEFAULT_OPTS='--height 40% --tmux bottom,40% --layout reverse'

# alias
alias ..="cd .."
alias ls='ls --color'
alias ll='ls --color -hl'
alias grep="grep --colour"
alias curl="curl -s"
alias diff="diff -u --color"
alias sxivd="nsxiv -r -t -s d"
alias sxiv="nsxiv"
alias ussh="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

# plugins
# https://github.com/scop/bash-completion
[ -f /usr/share/bash-completion/bash_completion ] && source /usr/share/bash-completion/bash_completion

# dircolors
[ -f $HOME/.dir_colors ] && eval "$(dircolors $HOME/.dir_colors)"

# functions
# n - start nnn file manager
n() {
	# block nesting of nnn in subshells
	if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
		echo "nnn is already running"
		return
	fi

	# unmask ^Q (if required, see `stty -a`) to quit nnn
	stty start undef
	stty stop undef
	stty lnext undef

	NNN_CTXMAX=1 \
	NNN_BMS="h:~;t:~/tmp"  \
	NNN_TRASH=1 \
	NNN_PLUG="d:diffs;m:nmount;n:notes;v:imgview" \
	NNN_USE_EDITOR=1 \
	NNN_COLORS="4444" \
	NNN_COPIER="xargs -0 < \"$SELECTION\" | xclip -selection clipboard -i" \
	NNN_FIFO="/tmp/nnn.fifo" \
	nnn -e -x -o -C "$@"
}

# t - creates new tmux session, or switch to existing one
t() {
	[[ -n "$TMUX" ]] && CHANGE="switch-client" || CHANGE="attach-session"
	if [ $1 ]; then
		NAME="${1:-$(basename $PWD)}"
		tmux has-session -t $NAME 2>/dev/null && tmux $CHANGE -t "$NAME" || (tmux new-session -d -s $NAME && tmux $CHANGE -t "$NAME")
		return
	fi
	SESSION=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --height=~40% --prompt="tmux > ") && \
		tmux $CHANGE -t "$SESSION" || echo "No sessions found."
}

p() {
	local PASS_STORE="${PASSWORD_STORE_DIR:-$HOME/.password-store/}"
	rg --files --glob="*.gpg" $PASS_STORE | sed -e "s#${PASS_STORE}##g" -e "s#.gpg##g" \
		| fzf --height=~40% --prompt="pass show > " \
		| xargs --no-run-if-empty pass show
}

f() {
	rg --files | fzf --prompt="vim > " --height=~40% | xargs --no-run-if-empty -o vim
}
