
## Settings
###########

HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000

setopt append_history
setopt inc_append_history
setopt no_hist_beep
setopt hist_ignore_dups
setopt hist_ignore_all_dups
setopt hist_expire_dups_first
setopt hist_save_no_dups
setopt hist_find_no_dups
setopt hist_reduce_blanks
setopt hist_verify
setopt interactivecomments
# setopt share_history

setopt extended_glob
setopt noequals
setopt nobeep
setopt autocd
setopt nohup
setopt hash_cmds


## Completion
#############

autoload -Uz compinit
compinit
# autoload -Uz bashcompinit
# bashcompinit

zstyle ':completion:*' completer _expand _complete _ignored
zstyle :compinstall filename '~/.zshrc'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

## Bindings
###########

# delete
bindkey "^[[3~" delete-char

bindkey "^[e"   expand-cmd-path
bindkey " "     magic-space

# Home/End
bindkey "^[[7~" beginning-of-line
bindkey "^[[8~" end-of-line

# PgUp/PgDn
bindkey "^[[5"  up-line-or-history
bindkey "^[[6"  down-line-or-history

# Up/Down
# disabled in favor of zsh-history-substring-search plugin
# bindkey "\e[A" history-search-backward
# bindkey "\e[B" history-search-forward

# Ctrl + Left/Right
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word

# Ctrl+k remove to eol
bindkey "\C-k" vi-kill-eol

## Aliases
##########
#
alias ls='ls --color'
alias ll='ls --color -hl'
alias grep="grep --colour"

alias tmux="tmux -u2"
alias curl="curl -s"

# alias vim="nvim"
alias mutt="neomutt"
alias sxivd="sxiv -r -t -s d"
alias tig="vim -c :GV"
alias magit="vim -c :MagitOnly"

# Todo/Notes
alias todo="vim ~/misc/notes/todo.md"
alias note="vim ~/misc/notes/notes.md"

# void linux
alias xq="sudo xbps-query"
alias xr="sudo xbps-remove"

## Prompt
#########
autoload -Uz vcs_info
autoload -U promptinit
promptinit

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git*' formats "%b"
precmd() {
    vcs_info
}
setopt prompt_subst
PROMPT='%F{green}#%f %F{green}%n@%m: %F{yellow}%1~%f %F{magenta}[${vcs_info_msg_0_:0:30}]%f $ '
RPROMPT=''


## Plugins
##########

# https://github.com/zsh-users/zsh-history-substring-search
source ~/.zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
bindkey "\e[A" history-substring-search-up
bindkey "\e[B" history-substring-search-down
# bindkey '^[[A' history-substring-search-up
# bindkey '^[[B' history-substring-search-down

HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=white,bold'
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=red,bold'

# https://github.com/zsh-users/zsh-autosuggestions
source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# https://github.com/zsh-users/zsh-completions
fpath=(~/.zsh/plugins/zsh-completions/src $fpath)

# FZF
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh

# https://github.com/direnv/direnv
# eval "$(direnv hook zsh)"
# kubectl
# eval "$(kubectl completion zsh)"
# krew (kubectl plugin manager)
# export PATH=$HOME/.krew/bin:$PATH


## Custom functions
###################

# nnn
n() {
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    export NNN_CTXMAX=1
    export NNN_BMS="h:~;t:~/tmp"
    export NNN_TRASH=1
    export NNN_PLUG="d:diffs;m:nmount;n:notes;v:imgsxiv"
    export NNN_USE_EDITOR=1
    export NNN_COLORS="4444"
    export NNN_COPIER="xargs -0 < \"$SELECTION\" | xclip -selection clipboard -i"
    export NNN_FIFO="/tmp/nnn.fifo"

    # Unmask ^Q (if required, see `stty -a`) to Quit nnn
    stty start undef
    stty stop undef
    stty lnext undef

    # Start nnn with your preferred options
    nnn -e -C "$@"
}

# tm - creates new tmux session, or switch to existing one.
tm() {
    [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
    if [ $1 ]; then
      tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
    fi
    session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# gitsync
gitsync() {
    remote=${1:-"upstream"}
    branch=${2:-"master"}
    echo "[INFO] Sync ${remote}/${branch} to origin/${branch}"
    read -s -k "?[INFO] Press any key to continue"
    echo "\n[INFO] syncing ... "

    cbranch=$(git branch --show-current)

    git checkout ${branch}
    git fetch ${remote}
    git rebase ${remote}/${branch}
    git push origin ${branch}

    git checkout ${cbranch}
}

fbr() {
    action=${1:-"co"}
    case $action in
    "del")
        git branch --no-color --sort=-committerdate --format='%(refname:short)' |
            fzf --header "git branch -D" --multi --ansi --tabstop=4 --preview-window 'right:60%' --preview="git lg {} --" |
            xargs --no-run-if-empty git branch --delete --force
        ;;
    "co")
        git branch --no-color --sort=-committerdate --format='%(refname:short)' |
            fzf --header "git checkout" --ansi --tabstop=4 --preview-window 'right:60%' --preview="git lg {} --" |
            xargs --no-run-if-empty git checkout
        ;;
    esac
}

fpr() {
   gh pr list | fzf --header "gh pr checkout" --tabstop=4 |
       awk '{print $1}' | xargs --no-run-if-empty gh pr checkout
}
