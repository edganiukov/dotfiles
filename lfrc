## Geneal options {{
# set shell
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu:--shwordsplit'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set scrolloff 10
# single mode
set nopreview
set ratios 1
set info size:time
# set drawbox
# # }}


## Bindings {{
# exec file
map X !$f
map c :clear
map gd cd ~/tmp
map <backspace2> :updir
map <a-.> :set hidden!
#  }}


## Functions {{
cmd fzf-find ${{
    res="$(fzf --reverse --header='Jump to location')"
    if [ -f "$res" ]; then
        cmd="select"
    elif [ -d "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf-find

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}
map <enter> :open

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# delete using trash-cli: https://github.com/andreafrancia/trash-cli
cmd trash ${{
    printf "$fx\n"
    printf "Trash files?[y/n]: "
    read ans
    [ $ans = "y" ] && trash-put $fx
}}
cmd trash-list !clear && trash-list
cmd trash-empty %trash-empty

map D :trash
map Tl :trash-list
map Te push :trash-empty<space>

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "Delete files?[y/n]: "
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}
map <delete> :delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd paste-async &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        cp -rn $list .
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}
map P :paste-async

# yank paths
cmd yank-dirname ${{
    dirname -- "$f" | tr -d '\n' | xclip -i -selection clipboard
}}
map Yd :yank-dirname

cmd yank-file ${{
    echo "$fx" | xclip -i -selection clipboard
}}
map Yf :yank-file

cmd yank-basename ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      xclip -i -selection clipboard
}}
map Yb :yank-basename

cmd mkdir %mkdir "$(echo $* | tr ' ' '\ ')"
map Md push :mkdir<space>

cmd mkfile ${{
  $EDITOR "$(echo $* | tr ' ' '\ ')"
}}
map Mf push :mkfile<space>

# open sxiv for the current directory
cmd sxiv ${{
  sxiv -r -t -s d . &
}}

# }}
